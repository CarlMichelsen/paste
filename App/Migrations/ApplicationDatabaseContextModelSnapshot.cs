// <auto-generated />
using System;
using Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace App.Migrations
{
    [DbContext(typeof(ApplicationDatabaseContext))]
    partial class ApplicationDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("paste")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Database.Entity.ContentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<byte[]>("Data")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("data");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.HasKey("Id")
                        .HasName("pk_content");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_content_deleted_at")
                        .HasFilter("\"content\".\"deleted_at\" IS NULL");

                    b.HasIndex("FileId")
                        .IsUnique()
                        .HasDatabaseName("ix_content_file_id");

                    b.ToTable("content", "paste");
                });

            modelBuilder.Entity("Database.Entity.FileActionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("action");

                    b.Property<string>("Checksum")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("checksum");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<Guid>("FileId")
                        .HasColumnType("uuid")
                        .HasColumnName("file_id");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("metadata");

                    b.Property<DateTimeOffset>("PerformedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("performed_at");

                    b.Property<long>("PerformedById")
                        .HasColumnType("bigint")
                        .HasColumnName("performed_by_id");

                    b.HasKey("Id")
                        .HasName("pk_action");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_action_deleted_at")
                        .HasFilter("\"action\".\"deleted_at\" IS NULL");

                    b.HasIndex("FileId")
                        .HasDatabaseName("ix_action_file_id");

                    b.HasIndex("PerformedById")
                        .HasDatabaseName("ix_action_performed_by_id");

                    b.ToTable("action", "paste");
                });

            modelBuilder.Entity("Database.Entity.FileEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ContentId")
                        .HasColumnType("uuid")
                        .HasColumnName("content_id");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTimeOffset?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deleted_at");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("mime_type");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint")
                        .HasColumnName("owner_id");

                    b.Property<long>("Size")
                        .HasColumnType("bigint")
                        .HasColumnName("size");

                    b.HasKey("Id")
                        .HasName("pk_file");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_file_deleted_at")
                        .HasFilter("\"file\".\"deleted_at\" IS NULL");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_file_owner_id");

                    b.HasIndex("Name", "OwnerId")
                        .IsUnique()
                        .HasDatabaseName("ix_file_name_owner_id");

                    b.ToTable("file", "paste");
                });

            modelBuilder.Entity("Database.Entity.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthenticationId")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("authentication_id");

                    b.Property<string>("AuthenticationMethod")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("character varying(512)")
                        .HasColumnName("authentication_method");

                    b.Property<DateTimeOffset>("FirstLoginUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("first_login_utc");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.ToTable("user", "paste");
                });

            modelBuilder.Entity("Database.Entity.ContentEntity", b =>
                {
                    b.HasOne("Database.Entity.FileEntity", "File")
                        .WithOne("Content")
                        .HasForeignKey("Database.Entity.ContentEntity", "FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_content_file_file_id");

                    b.Navigation("File");
                });

            modelBuilder.Entity("Database.Entity.FileActionEntity", b =>
                {
                    b.HasOne("Database.Entity.FileEntity", "File")
                        .WithMany("Actions")
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_action_file_file_id");

                    b.HasOne("Database.Entity.UserEntity", "PerformedBy")
                        .WithMany("Actions")
                        .HasForeignKey("PerformedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_action_user_performed_by_id");

                    b.Navigation("File");

                    b.Navigation("PerformedBy");
                });

            modelBuilder.Entity("Database.Entity.FileEntity", b =>
                {
                    b.HasOne("Database.Entity.UserEntity", "Owner")
                        .WithMany("Files")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_file_user_owner_id");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Database.Entity.FileEntity", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Content");
                });

            modelBuilder.Entity("Database.Entity.UserEntity", b =>
                {
                    b.Navigation("Actions");

                    b.Navigation("Files");
                });
#pragma warning restore 612, 618
        }
    }
}
